Git config command
Git config
Get and set configuration variables that control all facets of how Git looks and operates.
You can view all of your settings and where they are coming from using:
$ git config --list --show-origin
Set the name:
$ git config --global user.name "User name"
$ git config --global user.name "Monica"
Set the email:
$ git config --global user.email "gupta.monicag@gmail.com"
Set the default editor: (here visual studio code, can have notepad.exe)
$ git config --global core.editor Vim
The below tells default editor VS Code to wait till the next command of git is given.
$ git config --global core.editor "code --wait"
Set the default branch:
$ git config --global init.defaultbranch main
Check the setting:
$ git config --list



Open Power Shell as Admin:
> Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser
A for Yes to all
Close PS





$ mkdir Prj1
$ cd Prj1
Initialize Git
$ git init
This creates a folder .git:
Mode                LastWriteTime         Length Name
----                -------------         ------ ----
d-----        12/4/2022   5:19 PM                hooks
d-----        12/4/2022   5:19 PM                info
d-----        12/4/2022   5:19 PM                objects
d-----        12/4/2022   5:19 PM                refs
-a----        12/4/2022   5:19 PM            130 config
-a----        12/4/2022   5:19 PM             73 description
-a----        12/4/2022   5:19 PM             21 HEAD




1. Setting Up a Repository : Initializes a new Git repository in the current directory.
git init
2. Cloning a Repository :  Clones an existing repository into a new directory.
git clone <repository-url>
3. Checking Repository Status : Shows the state of the working directory and staging area.
git status
4. Adding Files to Staging Area : Stages changes for the next commit.
git add <file>
5. Committing Changes : Saves changes in the local repository.
git commit -m "Commit message"
6. Checking Commit History : Displays the commit history.
git log
7. Pushing Changes to Remote Repository : Sends local commits to the remote repository.
git push origin main
8. Pulling Changes from Remote Repository : Fetches and merges changes from the remote repository.
git pull origin main
9. Creating a New Branch : Creates a new branch named feature-branch.
git branch feature-branch
10. Switching Between Branches : Switches to the branch feature-branch.
git checkout feature-branch
11. Merging Changes : Merges the changes from feature-branch into the current branch.
git merge feature-branch
12. Deleting a Branch : Deletes the branch feature-branch.
git branch -d feature-branch
13. Stashing Changes : Temporarily saves changes without committing them.
git stash
14. Restoring Stashed Changes : Restores the most recent stashed changes.
git stash pop




Step 1: Export Code from TFS
Open the TFS command prompt or use Visual Studio. Navigate to the project folder:
cd path/to/project
Export code:
tf get
Step 2: Initialize a Git Repository
Go to the project folder. Initialize a new Git repository:
git init
Step 3: Add Files to Git Repository 
Stage files for commit:
git add .
Commit files:
git commit -m "Initial commit from TFS"
Step 4: Connect to Remote Git Repository
Create a new repository on GitHub or GitLab. Add the remote repository:
git remote remove origin
git remote add origin <repository-url>
git remote add origin https://github.com/monicag-gupta/gitAristrocat.git
Push to the remote repository:
git push origin --force HEAD:main
Step 5: Verify Migration
Check the repository status:
git status
Check the commit history:
git log







1. Create a new feature branch:
git checkout -b feature-login
2. Make changes to files:
echo "New feature" >> feature.txt
git add feature.txt
git commit -m "Add login feature"
3. Merge pull request:
git checkout -b main
git merge feature-login
4. Delete the branch:
git branch -d feature-login



1. Create develop locally from main
git checkout -b develop main
2. Create a feature branch
git checkout -b feature
git checkout -b feature/new-ui develop
3. Work on the feature.txt : add a line: "Hello World" then add it to the current branch:
git add feature.txt
and then commit
git commit -m "New UI implementation"
4. Merge the feature into develop
git checkout develop
git merge feature/new-ui
git branch -d feature/new-ui
5. Prepare a release branch
git checkout -b release/v1.0 develop
6. Fix bugs : In feature.txt, add a line "Fixed bugs" , add it to release/v1.0, the commit it : message: "Fixed bugs" 
and merge into main
git checkout main
git merge release/v1.0
7. Tag the release
git tag -a v1.0 -m "Release v1.0"
8. Merge back into develop
git checkout develop
git merge main




Here are some commonly used Git branch commands:
1. Listing Branches
View all branches:
git branch
View all branches (including remote branches):
git branch -a
2. Creating Branches
Create a new branch:
git branch <branch-name>
Create and switch to a new branch:
git checkout -b <branch-name>
Create a new branch from a specific commit:
git branch <branch-name> <commit-hash>
3. Switching Branches
Switch to an existing branch:
git checkout <branch-name>
Switch to an existing branch (Git 2.23+):
git switch <branch-name>



4. Deleting Branches
Delete a local branch:
git branch -d <branch-name>
Force delete a local branch (if it has unmerged changes):
git branch -D <branch-name>
Delete a remote branch:
git push origin --delete <branch-name>
5. Merging Branches
Merge a branch into the current branch:
git merge <branch-name>
Merge and create a commit automatically:
git merge --no-ff <branch-name>
6. Rebasing Branches
Rebase the current branch onto another branch:
git rebase <branch-name>
Rebase interactively (modify commits before merging):
git rebase -i <branch-name>
7. Tracking Remote Branches
Create a new local branch that tracks a remote branch:
git checkout -b <branch-name> origin/<branch-name>
Set an existing branch to track a remote branch:
git branch --set-upstream-to=origin/<branch-name>
8. Renaming Branches
Rename the current branch:
git branch -m <new-name>
Rename a different branch:
git branch -m <old-name> <new-name>
9. Pushing and Pulling Branches
Push a new branch to the remote repository:
git push -u origin <branch-name>
Pull changes from the remote branch:
git pull origin <branch-name>




Example: Git branch commands


Scenario: Working with Git Branches
Imagine you are working on a project and want to add a new feature without affecting the main branch. You will create a branch, make changes, merge it, and then clean up unused branches.
Step 1: Initialize a Git Repository
git init my-project
cd my-project
This creates a new Git repository in the my-project folder.
Step 2: Create and Switch to a New Branch
git checkout -b feature-branch
This creates a new branch called feature-branch and switches to it.
Step 3: Make Changes and Commit
Create a new file:
echo "Hello, World!" > hello.txt
Add the file to staging:
git add hello.txt
Commit the changes:
git commit -m "Added hello.txt file"

Step 4: View Available Branches
git branch
This shows the list of local branches. The active branch will have a * next to it.
Step 5: Switch Back to Main Branch
git checkout main
Step 6: Merge the Feature Branch into Main
git merge feature-branch
This merges feature-branch into main.
Step 7: Delete the Feature Branch (Optional)
git branch -d feature-branch
If the branch is not yet merged, you can force delete it:
git branch -D feature-branch
Step 8: Push Changes to Remote Repository
git remote add origin https://github.com/monicag-gupta/Prj1.git
git push -u origin main


Step 9: Create and Track a Remote Branch
git checkout -b dev-branch
git push -u origin dev-branch
This creates dev-branch locally and pushes it to the remote repository.
Step 10: Delete a Remote Branch
git push origin --delete dev-branch
This removes the dev-branch from the remote repository.
Step 11: Rebase the Feature Branch onto Main
git checkout feature-branch
git rebase main
This applies changes from feature-branch on top of main.
Step 12: Rename a Branch
Rename the current branch:
git branch -m new-branch-dev
Rename another branch:
git branch -m new-branch-dev dev-branch
